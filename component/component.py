# Lint as: python3
# Copyright 2019 Google LLC. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""TFX Schema Curation Custom Component
"""

from typing import List, Optional, Text

from tfx import types
from tfx.dsl.components.base import base_component
from tfx.dsl.components.base import executor_spec
from tfx.types import channel_utils
from tfx.types import standard_artifacts
from tfx.types.component_spec import ChannelParameter
from tfx.types.component_spec import ExecutionParameter
from tfx.utils import json_utils

import executor

class SchemaCurationSpec(types.ComponentSpec):
  """ComponentSpec for TFX Schema Curation Custom Component."""

  PARAMETERS = {
      'module_file': ExecutionParameter(type=str, optional=True),
      'module_path': ExecutionParameter(type=str, optional=True),
      'preprocessing_fn': ExecutionParameter(type=str, optional=True)
  }
  INPUTS = {
      'input_schema': ChannelParameter(type=standard_artifacts.Schema),       # Dictionary obtained as output from SchemaGen
  }
  OUTPUTS = {
      'output_schema': ChannelParameter(type=standard_artifacts.Schema),      # Dictionary which containes new schema
  }


class SchemaCuration(base_component.BaseComponent):
  """Custom TFX Schema Curation Component.

  The SchemaCuration component is used to apply user code to a schema generated by SchemaGen
  in order to curate the schema based on domain knowledge. 

  Component `outputs` contains:
   - `output_schema`: Channel of type `standard_artifact.Schema`

  Current progress : 
    - Accepts schema, outputs the same schema
  """

  SPEC_CLASS = SchemaCurationSpec
  EXECUTOR_SPEC = executor_spec.ExecutorClassSpec(executor.Executor)

  def __init__(self,
               input_schema: types.Channel):
    """Construct a SchemaCurationComponent.

    Args:
      input_schema: A dictionary that containes the schema generated by SchemaGen component of tfx
      output_schema: A dictionary that contains the schema after curation by the custom schema curation component
      name: Optional unique name. Necessary if multiple custom schema curation components are
        declared in the same pipeline.
    """
    # output_data will contain a list of Channels for each split of the data,
    # by default a 'train' split and an 'eval' split. Since HelloComponent
    # passes the input data through to output, the splits in output_data will
    # be the same as the splits in input_data, which were generated by the
    # upstream component.
    # if not output_schema:
      # output_schema = channel_utils.as_channel([standard_artifacts.Examples()])

    

    output_schema = types.Channel(type=standard_artifacts.Schema)

    spec = SchemaCurationSpec(input_schema=input_schema,
                              output_schema=output_schema)
    super(SchemaCuration, self).__init__(spec=spec)
